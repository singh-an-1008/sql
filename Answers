sql answers for the 7 : in serquence
select student_name , marks  from students join course on students.student_id=course.student_id order by marks desc
select student_name , marks  from students join course on students.student_id=course.student_id order by marks desc limit 1,2
select student_name , marks  from students join course on students.student_id=course.student_id where marks=(select MIN(marks) from course)
select student_name , marks  from students join course on students.student_id=course.student_id where marks=(select MIN(marks) from course) order by marks limit 3,1
select city  from students join course on students.student_id=course.student_id  order by marks desc limit 1,2
select count(city) from students join course on students.student_id=course.student_id 
select City FROM students GROUP BY City HAVING COUNT(*) > 1
select student_name from students where student_name like 'A%'
select count(student_name),city from students join course on students.student_id=course.student_id group by city
select count(student_name),marks from students join course on students.student_id=course.student_id group by marks HAVING COUNT(*) > 1

-- Answers for question no 9 ( lifestyle table was created )
select product_id from lifestyle where low_fats='Y' and recyclable='Y'


-- Answer for question no 6:
 select MAX(population) from information
 select MIN(gdp) from information
 select name from information where name like "%c"
 select name from information where name like "D%"
 select MAX(gdp) from information
 select SUM(GDP) from information where name in ('Algeria','Andola','Angola','Domnican Republic','Djibouti','Domnica')
 select name from information where (population<=200000000)
  
SQL Challenge : Answers
1: select * from city where City_population>100000 and country_code='USA';
2: select Names from city where City_population>100000 and country_code='USA';
3: select * from city
4: select * from city where id='1661';
5: select * from city where country_code='JPN' ( no japanese city avaialble )
6: select Names from city where country_code='JPN';
7 select city, states from station
8 select city from station where id%2=0;
9 select count(city)-count(distinct(city)) from station;
10/11 :select LENGTH(city),city from station order by LENGTH(city) desc limit 1/select LENGTH(city),city from station order by LENGTH(city) asc limit 1;
12: select distinct(city) from station where city   LIKE '[(a,e,i,o,u)%]'
13: select distinct(city) from station where city   LIKE '[%(a,e,i,o,u)]' and '[(a,e,i,o,u)%]'
14: select p.product_id,p.product_name from product p join sales s on p.product_id=s.product_id where sale_date  between '2019-01-01' and '2019-03-31'
18: select author_id from viewd where author_id=viewer_id;
19: select (count(*) * 100) / (select count(*) from delivery) AS required_percentage
   from delivery
   where order_date = customer_pref_delivery_date;
22: select c.country_name,
   case
   when w.weather_sate <= 15 then'cold'
   when w.weather_sate >= 25 then 'warm'
   else 'warmwise'
   end as  weather_type
   from countries c
   inner join weather w ON c.country_id = w.country_id;
23: select p.product_id, (units/price) as average_price 
   from prices p 
   inner join unitssold u 
   on p.product_id=u.product_id
   ORDER  by p.product_id;
24: select player_id, min(event_date) as first_login_date
   from activity
   group by player_id;
25: select player_id, MIN(event_date) AS first_login_date, device_id
   from activity
   group by player_id desc limit 1;
26: select p.product_name, sum(o.unit) as amount
    from Products p
    join Orders o on p.product_id = o.product_id
    where month(order_date)=2
    group by p.product_name
    having sum(o.unit) >= 100;
27: select user_id, name, mail
    from Users
    where mail REGEXP '^[A-Za-z][A-Za-z0-9_.-]*@leetcode.com$';
28: select c.customer_id, c.name as customer_name
   from customers c
   join orders o ON c.customer_id = o.customer_id
   join product p ON o.product_id = p.product_id
   where month(order_date) in (6,7)
   group by c.customer_id, c.name
   having SUM(o.quantity * p.price) >= 100
   order by customer_id
29: select c.title 
    from content c 
    join tvprogram t 
    on c.content_id=t.content_id
    where month(program_date)=6 and kids_content='Y' and content_type='Movies';
30:  select n.id,q.year,n.npv
    from NPV n 
    join Queries q 
    on n.id=q.id 
    order by q.year,n.id desc;
31: Question is repeated, answer would be same as above.
32: select employees.name, employeeUNI.unique_id
    from employees
    left join employeeUNI ON employees.id = employeeUNI.id;
33: select u.name, sum(distance)
    from userss u 
    inner join rides r 
    on u.id=r.user_id
    group by u.name 
    order by u.name desc;
34: select name
   from Used
   where user_id = (
   select user_id
   from MovieRating
   group by user_id
   order by cpount(*) DESC, name ASC
   LIMIT 1 );
 35:select title
    from Movies
    where movie_id = (
    select movie_id
    from MovieRating
    where created_at >= '2020-02-01' AND created_at <= '2020-02-29'
    group by movie_id
    having avg(rating) = (
    select max(avg_rating)
    from (
    select avg(rating) AS avg_rating
      from MovieRating
      where created_at >= '2020-02-01' AND created_at <= '2020-02-29'
    group by movie_id
    ) as avg_ratings
    )
    order by title asc
     limit 1
     );
36: repeated question
37: select e.name, coalasce(u.unique_id, 'null') AS unique_id
    from Employees e
    left join EmployeeUNI u ON e.id = u.id;
38: select s.id, s.name
    from students s
    left join departments d
    on d.id=s.department_id
    where d.id is null;
39: select
    from_id AS person1,
    to_id AS person2,
    count(*) AS call_count,
    sum(duration) AS total_duration
    from calls
    where from_id < to_id
    group by from_id, to_id;
40: select p.product_id, ROUND(AVG(price), 2) AS average_price
    from prices p
    inner join unitsSold u  
    on p.product_id=u.product_id 
    group by p.product_id
41: select sum(units*(width*height*length)) as volume , w.name from Warehouse w 
    join Products p 
    on w.product_id=p.product_id
    group by w.name;
42: select sale_date, sum( case when fruit = 'apples' then sold_num else -sold_num end) AS diff
    from Sales
    group by sale_date;
43: select distinct(device_id/games_played) as frac
    from Acticity
    where date_sub(date(event_date),interval -1 day)=1;
44: select E1.name AS manager_name
    from Employee E1
    join (
    select managerId, count(*) AS num_reports
    from Employee
    group by managerId
    having count(*) >= 5
    ) E2 on E1.id = E2.managerId;
45: select d.dept_name, count(student_id) as student_number
    from Department d 
    left join Student s 
    on s.dept_id=d.dept_id
    group by d.dept_id,d.dept_name
    order by student_number desc, d.dept_name asc;
46: select customer_id
    from Customer
    group bycustomer_id
    having(distinct product_key) = (select count(*) from Product);
47: select p.project_id, e.employee_id
    from Project p
    join Employee e on p.employee_id = e.employee_id
    where e.experience_years = (
    select max(experience_years)
    from Employee e2
    where e2.employee_id = p.employee_id
    );
48: proper input was not given for the orders 
49:select student_id,course_id, grade 
   from 
   (select student_id,course_id,grade ,
   row_number() over(partition by student_id order by grade desc,course_id asc)
   as Trem
   from Enrollments
   )
   as trek
   where Trem=1;
50:SELECT group_id, player_id, total_points
   FROM (
   SELECT group_id, player_id, SUM(first_score + second_score) AS total_points,
         ROW_NUMBER() OVER (PARTITION BY group_id ORDER BY SUM(first_score + second_score) DESC, player_id) AS rn
  FROM teams
  JOIN Matches ON Players.player_id = Matches.first_player OR Players.player_id = Matches.second_player
  GROUP BY group_id, player_id
  ) AS subquery
   WHERE rn = 1;

==========================================================================================================================================================================================================================
SET 2: Anwers 
51: select name,population, area 
    from world
    where population>=25000000 and area>=3000000;
52: select name 
    from customer
    where referee_id=Null or referee_id<>2;
53: select name
    from customers
    where customer_id NOT IN (SELECT distinct(customer_id) FROM Orders);
54: select team_id, COUNT(*) AS team_size
    from Employee
    group by team_id;
55: select c.name as country_name
    from Country c
    join Person p ON c.country_code = left(p.phone_number, 3)
    left join Calls cl on cl.callee_id = p.id
    group by c.name
    having avg(cl.duration) > (select avg(duration) from Calls);( Issue with answer, pllease review and send the refined version of the code )
56: select device_id,player_id, MAX(event_date) AS most_recent_login
    from Activity
    group player_id,device_id;
57: select customer_number,count(ordre_number) as order_count
    from orders
    group by customer_number
    having order_count>1;
58: select customer_number,count(ordre_number) as order_count
    from orders
    group by customer_number
    having order_count>1;
59: select 
    CASE 
    WHEN free=0 THEN NULL
    when free=1 then seat_id
    END as seat_id
    from cinema
    order by seat_id;
60: select name 
    from SalesPerson
    where name not in
    (select s.name 
    from SalesPerson s
    join Orders o on s.sales_id=o.sales_id 
    join Company c on c.com_id=o.com_id
    where c.name not in ('ORANGE','YELLOW','GREEN'));
61: select x,y,z,
    case
    when (x+y>z) then 'yes'
    else 'no'
    end triangle_formation
    from traingle
    order by x,y,z;
62: select min(abs(p1.x-p2.x))
    from point p1
    cross join point p2
    where p1.x<>p2.x;
foloow-up Ans: select min(p2.x - p1.x) AS shortest_distance
               from point p1
               join point p2 ON p2.x > p1.x;
63: select actor_id, director_id, count(timestamp)
    from actordirector
    where actor_id = director_id
    group by actor_id, director_id
    having count(timestamp) >= 3;
64: select p.product_name, s.year,s.price 
    from Sales s 
    join Product p 
    on s.product_id=p.product_id;
65: SELECT s.seller_id, SUM(s.price) AS total_sales_price
FROM saled s
JOIN product p ON s.product_id = p.product_id
GROUP BY s.seller_id
HAVING SUM(s.price) = (
  SELECT MAX(total_sales_price)
  FROM (
    SELECT seller_id, SUM(price) AS total_sales_price
    FROM saled
    GROUP BY seller_id
  ) AS subquery
);
66: select distinct s.buyer_id 
    from Products p 
    right join Sale s 
    on p.product_id=s.product_id
    where p.product_name='S8' and s.buyer_id not in (
      select distinct s.buyer_id 
      from Products p 
      right join Sale s 
      on p.product_id=s.product_id
      where p.product_name='iPhone'
 );
67: SELECT
  visited_on,
  amount,
  ROUND(AVG(amount) OVER (
    ORDER BY visited_on
    ROWS BETWEEN 6  PRECEDING AND CURRENT ROW
  ), 2) AS average_amount
FROM Customer
ORDER BY visited_on ASC;
68: select gender, day, sum(score_points) 
    over(partition by gender order by day asc)
    from Scores
    order by gender,day asc;
69:


70:select s.student_id, s.student_name, S.subject_name, count(*) as attended_exams
  from Students s 
  left join Examinations e 
  on s.student_id=e.student_id
  cross join Subjects S on e.subject_name=S.subject_name
  group by s.student_id, s.student_name, S.subject_name
  order by s.student_id, s.student_name, S.subject_name

  SELECT student_id, subject_name, COUNT(*) AS attendance_count
FROM Examinations
GROUP BY student_id, subject_name
ORDER BY student_id, subject_name;

SELECT s.student_id, s.student_name, sub.subject_name, COUNT(e.student_id) AS attendance_count
FROM Students s
CROSS JOIN Subjects sub
LEFT JOIN Examinations e ON s.student_id = e.student_id AND sub.subject_name = e.subject_name
GROUP BY s.student_id, s.student_name, sub.subject_name
ORDER BY s.student_id, sub.subject_name;
71:select employee_id, manager_id from (select employee_id,manager_id 
from Employees
where employee_id!=manager_id) as thumba
where manager_id not in (3,8);

72: 
75:SELECT company_id, employee_id, employee_name,
  CASE
    WHEN max_salary < 1000 THEN ROUND(salary, 0)
    WHEN max_salary BETWEEN 1000 AND 10000 THEN ROUND(salary * 0.76, 0)
    ELSE ROUND(salary * 0.51, 0)
  END AS salary_after_tax
FROM (
  SELECT s.company_id, s.employee_id, s.employee_name, s.salary,
    MAX(s.salary) OVER (PARTITION BY s.company_id) AS max_salary
  FROM Salaries s
) subquery;
76: select sale_date,
    sum(case when fruit='apples' then sold_num else -sold_num end) as ST_Difference
    from Sales
    group by sale_date;
77: select e.left_operand, e.operator,e.right_operand
CASE 
    WHEN  e.left_operand='x' and e.oprator='>' THEN  false
    WHEN  e.left_operand='x' and e.oprator='<' THEN  True
    WHEN  e.left_operand='x' and e.oprator='=' THEN  false
    WHEN  e.left_operand='y' and e.oprator='>' THEN  True
    WHEN  e.left_operand='y' and e.oprator='<' THEN  false
    WHEN  e.left_operand='x' and e.oprator='=' THEN  True
    end as `VALUES`
from Variables v 
inner join Expressions e 
on v.name=e.left_operand;
78: 1 : select U.name, MAX(rating)
         from MovieRating R
         join Movies M on M.movie_id=R.movie_id
         join Users  U on U.user_id=R.user_id
         group by U.name 
        order by MAX(rating) desc limit 1
79: select M.title, month(created_at) as T,MAX(rating)
    from MovieRating R
    join Movies M on M.movie_id=R.movie_id
    join Users  U on U.user_id=R.user_id
    group by M.title,T
    having T='2' 
    order by MAX(rating) desc limit 1
80:   SELECT c.name AS country_name
      FROM Country c
      JOIN Person p ON SUBSTRING(p.phone_number, 1, 3) = c.country_code
      JOIN Calls ca ON p.id = ca.caller_id 
      GROUP BY c.name
       HAVING AVG(ca.duration) > (
                 SELECT AVG(duration)
                   FROM Calls
                   );
81: SELECT Name
    FROM STUDENTS
    WHERE Marks > 75 and Name like '%bby'
    order by Name asc;
82: SELECT name
    FROM Employee
    ORDER BY name ASC;
83: SELECT name
    FROM Employee
    WHERE salary > 2000 AND months_of_employment < 10
    ORDER BY employee_id ASC;
84: SELECT
  CASE
    WHEN A = B AND B = C THEN 'Equilateral'
    WHEN A = B OR B = C OR A = C THEN 'Isosceles'
    WHEN A + B <= C OR A + C <= B OR B + C <= A THEN 'Not A Triangle'
    ELSE 'Scalene'
  END AS triangle_type
FROM TRIANGLES;
85: SELECT
  product_id,
  EXTRACT(YEAR FROM transaction_date) AS current_year,
  SUM(CASE WHEN EXTRACT(YEAR FROM transaction_date) = EXTRACT(YEAR FROM CURRENT_DATE) THEN spend_amount ELSE 0 END) AS current_year_spend,
  SUM(CASE WHEN EXTRACT(YEAR FROM transaction_date) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 THEN spend_amount ELSE 0 END) AS previous_year_spend,
  ROUND(((SUM(CASE WHEN EXTRACT(YEAR FROM transaction_date) = EXTRACT(YEAR FROM CURRENT_DATE) THEN spend_amount ELSE 0 END) - SUM(CASE WHEN EXTRACT(YEAR FROM transaction_date) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 THEN spend_amount ELSE 0 END)) / SUM(CASE WHEN EXTRACT(YEAR FROM transaction_date) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 THEN spend_amount ELSE 0 END)) * 100, 2) AS year_on_year_growth_rate
FROM user_transactions
GROUP BY product_id, current_year
ORDER BY product_id, current_year ASC;

























